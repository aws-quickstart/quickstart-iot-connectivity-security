AWSTemplateFormatVersion: 2010-09-09
Description: Creates an amplify app (qs-1s0ipp9io)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying the IoT Connectivity and Security Quick Start"
    Order: 1
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Name of project"
      Parameters:
        - ProjectName
    - Label:
        default: "ID of certificate authority"
      Parameters:
        - CACertificateID
    - Label:
        default: AWS Quick Start configuration
      Parameters:
        - QSS3BucketName
        - QSS3KeyPrefix
    ParameterLabels:
      ProjectName:
        default: Project Name
      CACertificateID:
        default: "ID of certificate authority"
      QSS3BucketName:
        default: AWS Quick Start bucket
      QSS3KeyPrefix:
        default: AWS Quick Start bucket prefix
Parameters:
  ProjectName:
    Default: iotquickstart
    Type: String
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
    Description: The name of the project. The name must only contain alphanumeric characters.
  CACertificateID:
    Default: abcd
    Description: Enter your CA certificate ID. See the instructions for creating a CA certificate (https://docs.aws.amazon.com/iot/latest/developerguide/create-your-CA-cert.html) and registering your CA certificate (https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html).
    Type: String
# Quick Start configuration
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description:  Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-iot-connectivity-security/
    Description:  S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with 
      a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
Mappings:
  Constants:
    Value: 
      BranchName: main
      ProjectRepoKey: zip/repo.zip
Resources:
  RandomString:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import base64
          import json
          import logging
          import string
          import random
          import boto3
          from botocore.vendored import requests
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def random_string(size=6):
            return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(size))
          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            responseData = {}
            if event['RequestType'] == 'Create':
              number = int(event['ResourceProperties'].get('Number', 6))
              rs = random_string(number)
              responseData['upper'] = rs.upper()
              responseData['lower'] = rs.lower()
            else: # delete / update
              rs = event['PhysicalResourceId'] 
              responseData['upper'] = rs.upper()
              responseData['lower'] = rs.lower()
                          
            logger.info('responseData {}'.format(responseData))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, responseData['lower'])
      #FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:random-string"
      Handler: "index.lambda_handler"
      Timeout: 30
      Role: !GetAtt "LambdaRole.Arn"
      Runtime: python3.6
  # The LambdaRole is very simple for this use case, because it only need to have access to write logs
  # If the lambda is going to access AWS services using boto3, this role must be
  # extended to give lambda the appropriate permissions.
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "lambda-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
  RandomStringCustomResource:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt RandomString.Arn
  LambdaGetRepo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'CreateCodeCommitRepo${ProjectName}-${RandomStringCustomResource.lower}'
      Environment: 
        Variables:
          ZIP_KEY: !FindInMap [Constants, Value, ProjectRepoKey]
          REPO_PREFIX: "source/"
          QS_BUCKET: !Ref QSS3BucketName
          QS_BUCKET_PREFIX: !Ref QSS3KeyPrefix
          # These variables are references in amplify parameters.json files
          VARIABLES: !Sub
            - "ResourceTag:${resourceTag},Active:Active,Inactive:Inactive,Troubleshooting:Troubleshooting,Quarantine:Quarantine,CACertificateID:${CACertificateID}"
            - resourceTag: !Ref ProjectName
              CACertificateID: !Ref CACertificateID
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRoleGetRepo.Arn
      Runtime: python3.8
      Timeout: 300
      Code:      
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          import io
          from io import BytesIO
          import zipfile
          from zipfile import ZipFile, ZIP_DEFLATED
          
          def handler(event, context):
              responseData = {}
              try:
                  print(event)
                  print(context)
                  result = cfnresponse.FAILED
                  if event['RequestType'] == 'Create':
                      s3Client = boto3.client('s3')
                      bucket = os.environ["QS_BUCKET"]
                      prefix = os.environ["QS_BUCKET_PREFIX"] + os.environ["REPO_PREFIX"]
                      zipKey = os.environ["QS_BUCKET_PREFIX"] + os.environ["ZIP_KEY"]
                      varArray = os.environ['VARIABLES'].split(",")
                      print(bucket)
                      print(prefix)
                      files = s3Client.list_objects_v2(
                          Bucket=bucket,
                          Prefix=prefix
                      )
                      print(files)
                      allFiles=files["Contents"]
              
                      mem_zip = BytesIO()
                      with ZipFile(mem_zip, mode="w", compression=ZIP_DEFLATED) as client:
                          for file in allFiles:
                              fileObject = s3Client.get_object(
                                  Bucket=bucket,
                                  Key=file["Key"]
                              )
                              newLocation=file["Key"].split(prefix,1)[1]
                              fileData=fileObject["Body"].read() 
                              if "parameters.json" in file["Key"]:
                                  fileString = fileData.decode('utf-8')
                                  for var in varArray:
                                      keyValue = var.split(":")
                                      fileString = fileString.replace("$"+keyValue[0],keyValue[1])
                                  fileData = fileString.encode('utf-8')
                              client.writestr(newLocation, fileData)
                      mem_zip.seek(0)
                      s3Client.upload_fileobj(mem_zip, bucket, zipKey)
                      result = cfnresponse.SUCCESS
                  else:
                      result = cfnresponse.SUCCESS
              except Exception as e:
                  print('error', e)   
              cfnresponse.send(event, context, result, {})
  LambdaExecutionRoleGetRepo:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-execution-role-get-repo-${ProjectName}-${RandomStringCustomResource.lower}'
      ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LambdaexecutionpolicyGetRepo:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub 'lambda-execution-policy-get-repo-${ProjectName}-${RandomStringCustomResource.lower}'
      Roles: 
        - !Ref LambdaExecutionRoleGetRepo
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub
              - "arn:${AWS::Partition}:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*"
              - region: !Ref "AWS::Region"
                account: !Ref "AWS::AccountId"
                lambda: !Ref LambdaGetRepo 
  SetupRepoCustomResource:
    DependsOn: [LambdaexecutionpolicyGetRepo]
    Type: Custom::CreateRepo
    Properties:
      ServiceToken: !GetAtt LambdaGetRepo.Arn
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    DependsOn: [SetupRepoCustomResource]
    Properties: 
      Code: 
        S3:
          Bucket: !Ref QSS3BucketName
          Key: 
            Fn::Sub:
              - "${prefix}${key}"
              - prefix: !Ref QSS3KeyPrefix
                key: !FindInMap [Constants, Value, ProjectRepoKey]
      RepositoryDescription: "IoT quickstart app"
      RepositoryName: !Sub '${ProjectName}-${RandomStringCustomResource.lower}'
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
  
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties: 
      Description: "IoT quickstart app"
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables: 
        - Name: ResourceTag
          Value: !Ref ProjectName
      Name: !Sub '${ProjectName}-${RandomStringCustomResource.lower}'
      Repository: !GetAtt CodeCommitRepo.CloneUrlHttp
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !FindInMap [Constants, Value, BranchName]
      AppId: !GetAtt AmplifyApp.AppId
      Description: Main Branch
      EnableAutoBuild: true
  LambdaDeployAmplifyApp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'DeployAmplifyApp${ProjectName}-${RandomStringCustomResource.lower}'
      Environment: 
        Variables:
          APP_ID: !GetAtt AmplifyApp.AppId
          BRANCH_NAME: !FindInMap [Constants, Value, BranchName]
          RESOURCE_TIMEOUT_MIN: '30' 
          SELF_INVOKE_TIME_MIN: '10'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRoleDeployApp.Arn
      Runtime: python3.8
      Timeout: 900
      Code:      
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import os
          import time
          
          
          amplifyPollTimeSec = 20
          
          execution = 'executionNumber'
          jobSummaryId = 'jobSummaryId'
          resourceStartTime = 'resourceStartTime'
          appId = os.environ['APP_ID']
          branchName = os.environ['BRANCH_NAME']
          functionName = os.environ['AWS_LAMBDA_FUNCTION_NAME']
          resourceTimeoutMin = os.environ['RESOURCE_TIMEOUT_MIN']
          selfInvokeTimeMin = os.environ['SELF_INVOKE_TIME_MIN']
          
          def handler(event, context):
              try:
                  print(event)
                  print(context)
                  result = cfnresponse.FAILED
                  client = boto3.client('amplify')
                  startTime = time.time()
                  
                  if event['RequestType'] == 'Create':    
                      firstIteration = False
                      if execution not in event:
                          event[execution] = 1
                          event[resourceStartTime] = startTime
                          firstIteration = True
                      
                      if firstIteration:
                          startJob=client.start_job(
                            appId=appId,
                            branchName=branchName,
                            jobType='RELEASE'
                          )
                          event['jobSummaryId']=startJob['jobSummary']['jobId']
                  
                      jobInProgress=True
                      
                      while jobInProgress:
                          time.sleep(amplifyPollTimeSec)
                          job=client.get_job(
                              appId=appId,
                              branchName=branchName,
                              jobId=event['jobSummaryId']
                          )
                          status=job['job']['summary']['status']
                          print(status)
                          
                          timeNow=time.time()
                          if status == "SUCCEED":
                              jobInProgress=False
                              result = cfnresponse.SUCCESS
                          elif status == "FAILED" or status == "CANCELLING" or status == "CANCELLED":
                              jobInProgress=False
                              print('Amplify failed to deploy')
                          elif (timeNow - startTime) > (int(selfInvokeTimeMin)*60):
                              jobInProgress=False
                              if (timeNow-event[resourceStartTime]) > (int(resourceTimeoutMin)*60):
                                  print('resource Timeout')
                              else:
                                  event[execution]  = event[execution] + 1
                                  jobInProgress=False
                                  print('self invoke')
                                  lambdaClient = boto3.client('lambda')
                                  lambdaClient.invoke(
                                      FunctionName=functionName,
                                      InvocationType='Event',
                                      Payload=bytes(json.dumps(event), encoding='utf8')
                                  )
                                  print('self invoke success')
                                  return
                  elif event['RequestType'] == 'Delete':
                      firstIteration = False
                      if execution not in event:
                          event[execution] = 1
                          event[resourceStartTime] = startTime
                          firstIteration = True
                      backend = client.get_backend_environment(
                          appId=appId,
                          environmentName=branchName
                      )
                      stackName = backend['backendEnvironment']['stackName']
                      cfnclient = boto3.client('cloudformation')
                      stackInfo = cfnclient.describe_stacks(
                          StackName=stackName
                      )
                      stackId=stackInfo['Stacks'][0]['StackId']
                      
                      if firstIteration:                   
                          cfnclient.delete_stack(
                              StackName=stackName
                          )
                      stackDeleteInProgress=True
                      while stackDeleteInProgress:
                          timeNow=time.time()
                          time.sleep(amplifyPollTimeSec)
                          stackIdInfo = cfnclient.describe_stacks(
                              StackName=stackId
                          )
                          status=stackIdInfo['Stacks'][0]['StackStatus']
                          if status == 'DELETE_COMPLETE':
                              stackDeleteInProgress=False
                              print("Delete Complete")
                              result = cfnresponse.SUCCESS
                          elif status == 'DELETE_FAILED':
                              stackDeleteInProgress=False
                              print('Stack Deletion Failed')
                          elif (timeNow - startTime) > (int(selfInvokeTimeMin)*60):
                              stackDeleteInProgress=False
                              if (timeNow-event[resourceStartTime]) > (int(resourceTimeoutMin)*60):
                                  print('resource Timeout')
                              else:
                                  event[execution]  = event[execution] + 1
                                  stackDeleteInProgress=False
                                  print('self invoke')
                                  lambdaClient = boto3.client('lambda')
                                  lambdaClient.invoke(
                                      FunctionName=functionName,
                                      InvocationType='Event',
                                      Payload=bytes(json.dumps(event), encoding='utf8')
                                  )
                                  print('self invoke success')
                                  return
                  else:
                      print("success")
                      result = cfnresponse.SUCCESS
              except Exception as e:
                  print('error', e)
              cfnresponse.send(event, context, result, {})
  LambdaExecutionRoleDeployApp:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-execution-role-deploy-app-${ProjectName}-${RandomStringCustomResource.lower}'
      ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LambdaexecutionpolicyDeployApp:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub 'lambda-execution-policy-deploy-app-${ProjectName}-${RandomStringCustomResource.lower}'
      Roles: 
        - !Ref LambdaExecutionRoleDeployApp
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub
              - "arn:${AWS::Partition}:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*"
              - region: !Ref "AWS::Region"
                account: !Ref "AWS::AccountId"
                lambda: !Sub 'DeployAmplifyApp${ProjectName}-${RandomStringCustomResource.lower}'
  DeployAppCustomResource:
    DependsOn:
      - LambdaexecutionpolicyDeployApp
      - AmplifyBranch
    Type: Custom::DeployApp
    Properties:
      ServiceToken: !GetAtt LambdaDeployAmplifyApp.Arn
Outputs:
  DefaultDomain:
    Value: !Sub 
      - "https://${branch}.${domain}"
      - branch: !FindInMap [Constants, Value, BranchName]
        domain: !GetAtt AmplifyApp.DefaultDomain