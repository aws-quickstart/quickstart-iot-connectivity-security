AWSTemplateFormatVersion: 2010-09-09
Description: Creates an amplify app (qs-1s0ipp9io)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into a new VPC"
    Order: 1
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Name of project"
      Parameters:
        - ProjectName
    - Label:
        default: "Github url for this project"
      Parameters:
        - ProjectRepoUrl
    - Label:
        default: "ID of certificate authority"
      Parameters:
        - CACertificateID
Parameters:
  ProjectName:
    Default: iotquickstart
    Type: String
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
  ProjectRepoUrl:
    Default: https://dy7wmgjy2d81x.cloudfront.net/iotquick.zip
    Type: String
  CACertificateID:
    Default: abcd
    Type: String
Mappings:
  Constants:
    Value: 
      BranchName: main
      ProjectRepoKey: repo.zip
Resources:
  RepoBucket:
    Type: AWS::S3::Bucket
  LambdaGetRepo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'CreateCodeCommitRepo${ProjectName}'
      Environment: 
        Variables:
          REPO_URL: !Ref ProjectRepoUrl
          REPO_BUCKET: !Ref RepoBucket
          REPO_KEY: !FindInMap [Constants, Value, ProjectRepoKey]
          REPO_PREFIX: "/submodules/"
          # These variables are references in amplify parameters.json files
          VARIABLES: !Sub
            - "ResourceTag:${resourceTag},Active:Active,Inactive:Inactive,Troubleshooting:Troubleshooting,Quarantine:Quarantine,CACertificateID:${CACertificateID}"
            - resourceTag: !Ref ProjectName
              CACertificateID: !Ref CACertificateID
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRoleGetRepo.Arn
      Runtime: python3.8
      Timeout: 300
      Code:      
        ZipFile: |
          import boto3
          import cfnresponse
          import io
          from io import BytesIO
          import json
          import os
          import urllib.request
          import zipfile
          from zipfile import ZipFile, ZIP_DEFLATED

          s3Client = boto3.client('s3')

          def handler(event, context):
              responseData = {}
              try:
                  print(event)
                  print(context)
                  
                  result = cfnresponse.FAILED
                  repoUrl = os.environ['REPO_URL']
                  bucket = os.environ['REPO_BUCKET']
                  key = os.environ['REPO_KEY']
                  varArray = os.environ['VARIABLES'].split(",")
                  repoPrefix = os.environ['REPO_PREFIX']
                  
                  downloadPath = "/tmp/"+key
                  
                  if event['RequestType'] == 'Create':
                      print('create')
                      data = urllib.request.urlopen(repoUrl).read()
                      
                      rawZip="/tmp/repo1.zip"
                      unpackZip="/tmp/unpack"
                      f = open(rawZip, 'wb')
                      f.write(data)
                      f.close()
                      
                      with ZipFile(rawZip, 'r') as zip_ref:
                          zip_ref.extractall(unpackZip)
                          
                      mem_zip = BytesIO()
                      with ZipFile(mem_zip, mode="w", compression=ZIP_DEFLATED) as client:
                          for root, dirs, files in os.walk(unpackZip, topdown=False):
                            for name in files:
                                fullPath = os.path.join(root, name)
                                if repoPrefix in fullPath:
                                    newLocation=fullPath.split(repoPrefix,1)[1]
                                    with open(fullPath, 'rb') as fileReference:
                                      fileData = fileReference.read()
                                      if "parameters.json" in fullPath:
                                          fileString = fileData.decode('utf-8')
                                          for var in varArray:
                                              keyValue = var.split(":")
                                              fileString = fileString.replace("$"+keyValue[0],keyValue[1])
                                          fileData = fileString.encode('utf-8')
                                      client.writestr(newLocation, fileData)
                      mem_zip.seek(0)
                      s3Client.upload_fileobj(mem_zip, bucket, key)
                      result = cfnresponse.SUCCESS
                      
                  elif event['RequestType'] == 'Update':
                      print('update');
                      result = cfnresponse.SUCCESS
                  else:
                      print('delete');
                      s3Client.delete_object(
                          Bucket=bucket,
                          Key=key
                      )
                      result = cfnresponse.SUCCESS
              except Exception as e:
                  print('error', e);
                  
              cfnresponse.send(event, context, result, responseData)
  LambdaExecutionRoleGetRepo:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-execution-role-get-repo-${ProjectName}'
      ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LambdaexecutionpolicyGetRepo:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub 'lambda-execution-policy-get-repo-${ProjectName}'
      Roles: 
        - !Ref LambdaExecutionRoleGetRepo
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub
              - "arn:${AWS::Partition}:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*"
              - region: !Ref "AWS::Region"
                account: !Ref "AWS::AccountId"
                lambda: !Ref LambdaGetRepo 
  SetupRepoCustomResource:
    DependsOn: [LambdaexecutionpolicyGetRepo]
    Type: Custom::CreateRepo
    Properties:
      ServiceToken: !GetAtt LambdaGetRepo.Arn
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    DependsOn: [SetupRepoCustomResource]
    Properties: 
      Code: 
        S3:
          Bucket: !Ref RepoBucket
          Key: !FindInMap [Constants, Value, ProjectRepoKey]
      RepositoryDescription: "IoT quickstart app"
      RepositoryName: !Ref ProjectName
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
  
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties: 
      Description: "IoT quickstart app"
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables: 
        - Name: ResourceTag
          Value: !Ref ProjectName
      Name: !Ref ProjectName
      Repository: !GetAtt CodeCommitRepo.CloneUrlHttp
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !FindInMap [Constants, Value, BranchName]
      AppId: !GetAtt AmplifyApp.AppId
      Description: Main Branch
      EnableAutoBuild: true
  LambdaDeployAmplifyApp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'DeployAmplifyApp${ProjectName}'
      Environment: 
        Variables:
          APP_ID: !GetAtt AmplifyApp.AppId
          BRANCH_NAME: !FindInMap [Constants, Value, BranchName]
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRoleDeployApp.Arn
      Runtime: python3.8
      Timeout: 5
      Code:      
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          def handler(event, context):
              responseData = {}
              try:
                  print(event)
                  print(context)
                  result = cfnresponse.FAILED
                  appId = os.environ['APP_ID']
                  branchName = os.environ['BRANCH_NAME']
                                  
                  if event['RequestType'] == 'Create':
                      client = boto3.client('amplify')
                      response = client.start_job(
                          appId=appId,
                          branchName=branchName,
                          jobType='RELEASE'
                      )
                      result = cfnresponse.SUCCESS
                  else:
                      print("delete")
                      result = cfnresponse.SUCCESS
              except Exception as e:
                  print('error', e);
              cfnresponse.send(event, context, result, responseData)
  LambdaExecutionRoleDeployApp:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-execution-role-deploy-app-${ProjectName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LambdaexecutionpolicyDeployApp:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub 'lambda-execution-policy-deploy-app-${ProjectName}'
      Roles: 
        - !Ref LambdaExecutionRoleDeployApp
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: amplify:StartJob
            Resource: !Sub "arn:${AWS::Partition}:amplify:${AWS::Region}:${AWS::AccountId}:*"
  DeployAppCustomResource:
    DependsOn:
      - LambdaexecutionpolicyDeployApp
      - AmplifyBranch
    Type: Custom::DeployApp
    Properties:
      ServiceToken: !GetAtt LambdaDeployAmplifyApp.Arn
Outputs:
  DefaultDomain:
    Value: !Sub 
      - "https://${branch}.${domain}"
      - branch: !FindInMap [Constants, Value, BranchName]
        domain: !GetAtt AmplifyApp.DefaultDomain