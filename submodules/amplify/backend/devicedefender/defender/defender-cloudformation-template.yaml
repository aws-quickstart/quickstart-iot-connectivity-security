AWSTemplateFormatVersion: "2010-09-09"
Description: "Device Defender"
Parameters: 
     env: 
        Type: "String" 
     functiondefenderalertArn: 
        Type: "String"
     functiondefenderalertName: 
        Type: "String"
     functionjustintimeregistrationArn: 
        Type: "String"
     functionjustintimeregistrationName: 
        Type: "String"
     storagetelemetryDataTableArn:
        Type: "String"
     storagetelemetryDataTableName:
        Type: "String"
     storageproductTableGroupActive:
        Type: "String"
     CACertificateID:
        Type: "String"
        Default: caCertId
Resources:
    AuditRole:
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Action:
                        - 'sts:AssumeRole'
                      Principal:
                        Service:
                            - iot.amazonaws.com
            Policies: 
                - PolicyName: root
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                    - Effect: Allow
                      Resource: '*'
                      Action:
                        - "iot:GetLoggingOptions"
                        - "iot:GetV2LoggingOptions"
                        - "iot:ListCACertificates"
                        - "iot:ListCertificates"
                        - "iot:DescribeCACertificate"
                        - "iot:DescribeCertificate"
                        - "iot:ListPolicies"
                        - "iot:GetPolicy"
                        - "iot:GetEffectivePolicies"
                        - "iot:ListRoleAliases"
                        - "iot:DescribeRoleAlias"
                        - "cognito-identity:GetIdentityPoolRoles"
                        - "iam:ListRolePolicies"
                        - "iam:ListAttachedRolePolicies"
                        - "iam:GetRole"
                        - "iam:GetPolicy"
                        - "iam:GetPolicyVersion"
                        - "iam:GetRolePolicy"
                        - "iam:GenerateServiceLastAccessedDetails"
                        - "iam:GetServiceLastAccessedDetails"
            RoleName: 
              'Fn::Join':
                - '-'
                - - 'IotQuickstartDeviceDefenderAuditRole'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env
    DeviceDefenderAudit:
        Type: AWS::IoT::AccountAuditConfiguration
        Properties: 
            AccountId: !Ref AWS::AccountId
            AuditNotificationTargetConfigurations:
              Sns: 
                Enabled: True
                RoleArn: !GetAtt ThingToQuarantineRole.Arn
                TargetArn: !Ref SnsQuarantineTopic
            AuditCheckConfigurations: 
                AuthenticatedCognitoRoleOverlyPermissiveCheck: 
                     Enabled: True
                CaCertificateExpiringCheck: 
                     Enabled: True
                CaCertificateKeyQualityCheck: 
                     Enabled: True
                ConflictingClientIdsCheck: 
                     Enabled: True
                DeviceCertificateExpiringCheck: 
                     Enabled: True
                DeviceCertificateKeyQualityCheck: 
                     Enabled: True
                DeviceCertificateSharedCheck: 
                     Enabled: True
                IotPolicyOverlyPermissiveCheck: 
                     Enabled: True
                IotRoleAliasAllowsAccessToUnusedServicesCheck: 
                     Enabled: True
                IotRoleAliasOverlyPermissiveCheck: 
                     Enabled: True
                LoggingDisabledCheck: 
                     Enabled: True
                RevokedCaCertificateStillActiveCheck: 
                     Enabled: True
                RevokedDeviceCertificateStillActiveCheck: 
                     Enabled: True
                UnauthenticatedCognitoRoleOverlyPermissiveCheck: 
                     Enabled: True
            RoleArn: !GetAtt AuditRole.Arn
    ThingToQuarantinePolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyName: 
              'Fn::Join':
                - '-'
                - - 'ThingToQuarantinePolicy'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env   
            Roles: 
               - !Ref ThingToQuarantineRole
            PolicyDocument:
               Version: '2012-10-17'
               Statement:
                    - Effect: Allow
                      Action:
                         - "sns:Publish"
                      Resource: !Ref SnsQuarantineTopic      
    ThingToQuarantineRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: 
              'Fn::Join':
                - '-'
                - - 'ThingToQuarantineRole'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env            
            AssumeRolePolicyDocument:
               Version: "2012-10-17"
               Statement: 
                    - Effect: "Allow"
                      Principal:
                        Service: "iot.amazonaws.com"
                      Action: "sts:AssumeRole"
    SnsQuarantineTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: 
          'Fn::Join':
            - ''
            - - 'quarantine'
              - 'Fn::Select':
                  - 3
                  - 'Fn::Split':
                      - '-'
                      - Ref: 'AWS::StackName'
              - Ref: env   
        Subscription: 
          - Endpoint: !Ref functiondefenderalertArn
            Protocol: "lambda"
    LambdaInvokePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        Principal: "sns.amazonaws.com"
        SourceArn: !Ref SnsQuarantineTopic
        FunctionName: !Ref functiondefenderalertArn
    DeviceDefenderSecurityProfile:
        Type: "AWS::IoT::SecurityProfile"
        Properties: 
            SecurityProfileName: 
              'Fn::Join':
                - '-'
                - - 'SecurityProfile'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env   
            AlertTargets:
               SNS: 
                    AlertTargetArn: !Ref SnsQuarantineTopic
                    RoleArn: !GetAtt ThingToQuarantineRole.Arn
            TargetArns:
                - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thinggroup/${storageproductTableGroupActive}'
            Behaviors:
                - Name: "Authorization_Failures"
                  Metric: "aws:num-authorization-failures"
                  Criteria: 
                    ConsecutiveDatapointsToAlarm: 1
                    ConsecutiveDatapointsToClear: 1
                    MlDetectionConfig:
                      ConfidenceLevel: "HIGH"
                  SuppressAlerts: false
                - Name: "Message_Size"
                  Metric: "aws:message-byte-size"
                  Criteria: 
                    ConsecutiveDatapointsToAlarm: 1
                    ConsecutiveDatapointsToClear: 1
                    MlDetectionConfig:
                      ConfidenceLevel: "HIGH"
                  SuppressAlerts: false
                - Name: "Message_Sent"
                  Metric: "aws:num-messages-sent"
                  Criteria: 
                    ConsecutiveDatapointsToAlarm: 1
                    ConsecutiveDatapointsToClear: 1
                    MlDetectionConfig:
                      ConfidenceLevel: "HIGH"
                  SuppressAlerts: false
                - Name: "Message_Received"
                  Metric: "aws:num-messages-received"
                  Criteria: 
                    ConsecutiveDatapointsToAlarm: 1
                    ConsecutiveDatapointsToClear: 1
                    MlDetectionConfig:
                      ConfidenceLevel: "HIGH"
                  SuppressAlerts: false
    DeviceDefenderAuditSchedule:
      Type: AWS::IoT::ScheduledAudit
      DependsOn: [DeviceDefenderAudit]
      Properties: 
        Frequency: DAILY
        ScheduledAuditName: !Sub 'dailyaudit-${env}'
        TargetCheckNames: 
          - AUTHENTICATED_COGNITO_ROLE_OVERLY_PERMISSIVE_CHECK
          - CA_CERTIFICATE_EXPIRING_CHECK
          - CA_CERTIFICATE_KEY_QUALITY_CHECK
          - CONFLICTING_CLIENT_IDS_CHECK
          - DEVICE_CERTIFICATE_EXPIRING_CHECK
          - DEVICE_CERTIFICATE_KEY_QUALITY_CHECK
          - DEVICE_CERTIFICATE_SHARED_CHECK
          - IOT_POLICY_OVERLY_PERMISSIVE_CHECK
          - IOT_ROLE_ALIAS_ALLOWS_ACCESS_TO_UNUSED_SERVICES_CHECK
          - IOT_ROLE_ALIAS_OVERLY_PERMISSIVE_CHECK
          - LOGGING_DISABLED_CHECK
          - REVOKED_CA_CERTIFICATE_STILL_ACTIVE_CHECK
          - REVOKED_DEVICE_CERTIFICATE_STILL_ACTIVE_CHECK
          - UNAUTHENTICATED_COGNITO_ROLE_OVERLY_PERMISSIVE_CHECK
    IoTJitrActionRole:
      Type: 'AWS::IAM::Role'
      Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - 
                  Action: 'sts:AssumeRole'
                  Effect: Allow
                  Principal: 
                    Service: 
                      "iot.amazonaws.com"

    IoTJitrActionRolePolicy:
      Type: 'AWS::IAM::Policy'
      DependsOn: [IoTJitrActionRole]
      Properties:
          PolicyDocument:
              Statement:
                  - 
                    Action: 
                      - 'lambda:InvokeFunction'
                      - 'logs:CreateLogStream'
                      - 'logs:PutLogEvents'
                    Effect: Allow
                    Resource: '*'
              Version: '2012-10-17'
          PolicyName: 
            'Fn::Join':
                - '-'
                - - 'IoTJitrActionRolePolicy'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env   
          Roles:
              -
                  Ref: IoTJitrActionRole
    IoTJitrActionRule:
      Type: 'AWS::IoT::TopicRule'
      DependsOn: [IoTJitrActionRolePolicy]
      Properties:
          TopicRulePayload:
              Actions:
                  - Lambda: 
                      FunctionArn: !Ref functionjustintimeregistrationArn
              RuleDisabled: false
              Sql: !Sub "SELECT * FROM '$aws/events/certificates/registered/${CACertificateID}'"
    IoTJitrPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: iot.amazonaws.com
        FunctionName: !Ref functionjustintimeregistrationName
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !GetAtt IoTJitrActionRule.Arn
    IoTTelemetryActionRole:
      Type: 'AWS::IAM::Role'
      Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - 
                  Action: 'sts:AssumeRole'
                  Effect: Allow
                  Principal: 
                    Service: 
                      "iot.amazonaws.com"

    IoTTelemetryActionRolePolicy:
      Type: 'AWS::IAM::Policy'
      DependsOn: [IoTTelemetryActionRole]
      Properties:
          PolicyDocument:
              Statement:
                  - 
                    Action: 
                      - 'dynamodb:PutItem'
                    Effect: Allow
                    Resource: !Ref storagetelemetryDataTableArn
              Version: '2012-10-17'
          PolicyName: 
            'Fn::Join':
                - '-'
                - - 'IoTTelemetryActionRolePolicy'
                  - 'Fn::Select':
                      - 3
                      - 'Fn::Split':
                          - '-'
                          - Ref: 'AWS::StackName'
                  - Ref: env  
          Roles:
              -
                  Ref: IoTTelemetryActionRole
    IoTTelemetryActionRule:
      Type: 'AWS::IoT::TopicRule'
      DependsOn: [IoTTelemetryActionRolePolicy]
      Properties:
          TopicRulePayload:
              Actions:
                  - DynamoDBv2: 
                      PutItem: 
                        TableName: !Ref storagetelemetryDataTableName
                      RoleArn: !GetAtt IoTTelemetryActionRole.Arn
              RuleDisabled: false
              Sql: "SELECT *, concat(topic(2),':', topic(3)) AS accountSerial, timestamp() AS time FROM 'dt/+/#'"